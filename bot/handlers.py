import json
import logging
import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery

from bot import session_pool
from bot.config import ADMIN_ID
from bot.database.db import check_active_session, verify_password, get_cached_response, delete_cached_response, \
    deduct_balance, save_response_to_cache, check_low_balance, refund_balance
from bot.database.db import (
    get_user_balance
)
from bot.database.db import logout_user
from bot.keyboards import get_user_menu, get_admin_menu
from bot.utils import normalize_query, validate_query, filter_unique_data, send_api_request, format_api_response, \
    save_response_as_html, send_web_request
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥—É–ª–∏
from bot.utils import (
    send_extended_api_request
)

from bot.database.db import check_active_session, verify_password, get_best_cached_response, delete_cached_response, \
    deduct_balance, save_response_to_cache, check_low_balance

from bot.session_manager import session_pool

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à—ë–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é.
    –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_active_session(user_id):
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id == ADMIN_ID:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=get_admin_menu()
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
            await message.answer(
                "üëã –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_user_menu()
            )
    else:
        await message.answer(
            "üîê <b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
            "üìå <b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>\n\n"
            "‚úÖ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>ivanov123 MyStrongPass2024</code>\n\n"
            "üí° <i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</i>\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Mersronada",
            parse_mode="HTML"
        )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É.
    """
    help_text = (
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "‚Ä¢ `/balance` ‚Äì —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ `/extended_search [–∑–∞–ø—Ä–æ—Å]` ‚Äì —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
        "‚Ä¢ `/logout` ‚Äì –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–§–ò–û, –Ω–æ–º–µ—Ä –∞–≤—Ç–æ, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—á—Ç–∞ –∏ —Ç.–¥.), "
        "–∏ –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–∏—Å–∫."
    )
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("logout"))
async def cmd_logout(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /logout: –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    """
    user_id = message.from_user.id
    if not check_active_session(user_id):
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    logout_user(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    await message.answer(
        "üîê <b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
        "üìå <b>–§–æ—Ä–º–∞—Ç:</b>\n"
        "<code>–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>\n\n"
        "‚úÖ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>ivanov123 MyStrongPass2024</code>\n\n"
        "üí° <i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</i>\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Mersronada",
        parse_mode="HTML"
    )


@router.message(Command("extended_search"))
async def cmd_extended_search(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended_search [–∑–∞–ø—Ä–æ—Å].
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–º–µ—Å—Ç–æ API.
    """
    user_id = message.from_user.id
    if not check_active_session(user_id):
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    parts = message.text.strip().split(" ", 1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extended_search [–∑–∞–ø—Ä–æ—Å]")
        return

    query = parts[1].strip()
    cache_key = "extended__" + query

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_found, cached_response, cache_source = get_best_cached_response(user_id, cache_key)
    if cached_found:
        formatted_text = format_api_response(cached_response)
        await message.answer(
            f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ ({cache_source}):\n\n{formatted_text}",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º HTML-—Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        html_path = await save_response_as_html(user_id, cache_key, cached_response)
        if html_path and os.path.exists(html_path):
            await message.answer_document(FSInputFile(html_path))

        return

    # 2. –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    success, response_text = deduct_balance(user_id)
    if not success:
        await message.answer(response_text)
        return

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_message = await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # 3. –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if session_pool is None:
        await status_message.edit_text("–û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        refund_success, refund_message = refund_balance(user_id)
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ–ª–∞–≥ extended=True)
    success, api_resp = await send_web_request(query, session_pool)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    await status_message.delete()

    if not success:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        refund_success, refund_message = refund_balance(user_id)
        await message.answer(f"{api_resp}\n\n{refund_message}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º extended__
    save_response_to_cache(user_id, cache_key, api_resp)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_response = format_api_response(api_resp)
    await message.answer(formatted_response, parse_mode="Markdown")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    html_path = await save_response_as_html(user_id, cache_key, api_resp)
    if html_path and os.path.exists(html_path):
        await message.answer_document(FSInputFile(html_path))
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML-—Ñ–∞–π–ª–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("menu"))
async def cmd_user_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = message.from_user.id
    if not check_active_session(user_id):
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_user_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data == "user_balance")
async def cb_user_balance(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –±–∞–ª–∞–Ω—Å'"""
    user_id = callback.from_user.id
    if not check_active_session(user_id):
        await callback.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É", show_alert=True)
        return

    balance = get_user_balance(user_id)
    if balance is not None:
        await callback.message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}")
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
    await callback.answer()


@router.callback_query(lambda c: c.data == "search_help")
async def cb_search_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫'"""
    await callback.message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –§–ò–û + –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 01.01.1990)\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (79001234567)\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (1234 567890)\n"
        "‚Ä¢ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è (XTA210990Y1234567)\n"
        "‚Ä¢ –ì–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ê123–ë–í77)\n"
        "‚Ä¢ –ü–æ—á—Ç–∞ (user@example.com)\n"
        "‚Ä¢ –ò–ù–ù (1234567890)\n"
        "‚Ä¢ –°–ù–ò–õ–° (12345678901)"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "extended_search_info")
async def cb_extended_search_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫'"""
    await callback.message.answer(
        "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
        "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/extended_search –∑–∞–ø—Ä–æ—Å</code>\n\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
        "–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "logout")
async def cb_logout(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏'"""
    user_id = callback.from_user.id
    logout_user(user_id)
    await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    await callback.answer()



# ======= –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã) =======
# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º universal_message_handler –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.message(lambda message: message.text is not None and not message.text.startswith('/'))
async def universal_message_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∂–∏–º–æ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.
    """
    # Check if user is in a state (like waiting for file upload)
    current_state = await state.get_state()
    if current_state:
        return

    user_id = message.from_user.id
    query_text = message.text.strip()

    # 1. Authentication check
    if not check_active_session(user_id):
        # Try to recognize login/password format
        parts = query_text.split(maxsplit=1)
        if len(parts) == 2:
            login, password = parts
            success, info = verify_password(login, password, user_id, {
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'username': message.from_user.username
            })
            await message.answer(info)
            if success:
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.",
                    reply_markup=get_user_menu()
                )
        else:
            await message.answer(
                "üîê <b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
                "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
                "üìå <b>–§–æ—Ä–º–∞—Ç:</b>\n"
                "<code>–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>\n\n"
                "‚úÖ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>ivanov123 MyStrongPass2024</code>\n\n"
                "üí° <i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</i>\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Mersronada",
                parse_mode="HTML"
            )
        return

    # 2. Query validation
    query_text = normalize_query(query_text)
    valid, formatted_text = validate_query(query_text)
    if not valid:
        await message.answer(formatted_text)
        return
    query_text = formatted_text

    # 3. Process search request using the unified handler
    # This function contains all the search logic with fallback handling
    try:
        from bot.utils import handle_search_request
        await handle_search_request(message, query_text, state)
    except Exception as e:
        # Catch-all exception handler to prevent bot crashes
        logging.error(f"Error in handle_search_request: {e}", exc_info=True)

        # Send error message to user
        await message.answer(
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )

        # Return balance in case of error
        try:
            refund_success, refund_message = refund_balance(user_id)
            if refund_success:
                await message.answer(f"üí∞ {refund_message}")
        except Exception as refund_error:
            logging.error(f"Error refunding balance: {refund_error}")


# Also update the extended_search command handler to use fallback mechanism
@router.message(Command("extended_search"))
async def cmd_extended_search(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended_search [–∑–∞–ø—Ä–æ—Å] —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    """
    user_id = message.from_user.id
    if not check_active_session(user_id):
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    parts = message.text.strip().split(" ", 1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extended_search [–∑–∞–ø—Ä–æ—Å]")
        return

    query = parts[1].strip()

    # Check if web service is available
    try:
        from bot.utils import check_web_service_available
        web_available = await check_web_service_available()

        if not web_available:
            await message.answer(
                "‚ö†Ô∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return
    except Exception as e:
        logging.error(f"Error checking web service availability: {e}")
        # Continue anyway - we'll check again when sending the request

    # Add prefix to distinguish extended search in cache
    cache_key = "extended__" + query

    # Check cache
    cached_found, cached_response, cache_source = get_best_cached_response(user_id, cache_key)
    if cached_found:
        formatted_text = format_api_response(cached_response)
        await message.answer(
            f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ ({cache_source}):\n\n{formatted_text}",
            parse_mode="Markdown"
        )

        # Get HTML-file from cache or generate it
        html_path = await save_response_as_html(user_id, cache_key, cached_response)
        if html_path and os.path.exists(html_path):
            await message.answer_document(FSInputFile(html_path))
        return

    # Deduct balance
    success, response_text = deduct_balance(user_id)
    if not success:
        await message.answer(response_text)
        return

    # Start search
    status_message = await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # Check session pool
    from bot.session_manager import session_pool
    if session_pool is None:
        await status_message.edit_text("–û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        refund_success, refund_message = refund_balance(user_id)
        await message.answer(refund_message)
        return

    # Use extended search
    success, api_resp = await send_web_request(query, session_pool)

    # Remove status message
    await status_message.delete()

    if not success:
        # Refund on error
        refund_success, refund_message = refund_balance(user_id)
        await message.answer(f"{api_resp}\n\n{refund_message}")
        return

    # Save to cache
    save_response_to_cache(user_id, cache_key, api_resp)

    # Format and send response
    formatted_response = format_api_response(api_resp)
    await message.answer(formatted_response, parse_mode="Markdown")

    # Generate HTML
    html_path = await save_response_as_html(user_id, cache_key, api_resp)
    if html_path and os.path.exists(html_path):
        await message.answer_document(FSInputFile(html_path))
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML-—Ñ–∞–π–ª–∞.")