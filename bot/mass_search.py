import asyncio
import json
import logging
import os
import random
import re
import time
from collections import defaultdict
from datetime import datetime
from typing import Dict


from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from bot.common import mass_search_semaphore, active_user_searches, mass_search_queue
from bot.database.db import (
    check_active_session, get_user_balance, check_balance_for_mass_search, batch_deduct_balance, log_mass_search_start,
    update_mass_search_status
)
from bot.utils import normalize_query, validate_query, send_api_request, filter_unique_data, format_api_response


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
class MassSearchStates(StatesGroup):
    waiting_for_file = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    confirming_search = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–∏–≤–∞ (–ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
    processing = State()  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
mass_search_router = Router()


# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def debug_compare_results(user_id, query):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ–∂–¥—É –æ–¥–∏–Ω–æ—á–Ω—ã–º –∏ –º–∞—Å—Å–æ–≤—ã–º –ø—Ä–æ–±–∏–≤–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    success, single_response = send_api_request(query)

    if not success:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–∏–Ω–æ—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {single_response}")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '{query}':")
    logging.info(json.dumps(single_response, ensure_ascii=False, indent=2)[:1000] + "...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
    filtered_data = filter_unique_data(single_response)
    formatted_text = format_api_response(filtered_data, limit_length=False)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    logging.info(formatted_text[:1000] + "...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
    processor = MassSearchProcessor()

    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    phones1 = processor.extract_phones(single_response)
    phones2 = processor.extract_phones_from_text(formatted_text)

    logging.info(f"–¢–µ–ª–µ—Ñ–æ–Ω—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–æ–º extract_phones: {phones1}")
    logging.info(f"–¢–µ–ª–µ—Ñ–æ–Ω—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–æ–º extract_phones_from_text: {phones2}")


# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class MassSearchProcessor:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """

    def __init__(self, max_concurrent: int = 5, min_request_interval: float = 1.0, max_request_interval: float = 4.0,
                 batch_size: int = 20):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

        :param max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        :param min_request_interval: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :param max_request_interval: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :param batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.max_concurrent = max_concurrent
        self.min_request_interval = min_request_interval
        self.max_request_interval = max_request_interval
        self.batch_size = batch_size
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.results_lock = asyncio.Lock()
        self.progress_counter = 0
        self.progress_lock = asyncio.Lock()
        self.session_usage = defaultdict(int)  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
        self.total_queries = 0
        self.processed_queries = 0
        self.session_rotation_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
        self.mass_search_id = f"mass_{int(time.time())}_{random.randint(1000, 9999)}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç—Ç–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞

        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        self.bot = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ process_file
        self.user_id = None
        self.status_message_id = None

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.last_status_update = time.time()
        self.status_update_interval = 2.0  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.query_status = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stats = {
            "cache_hits": 0,
            "cache_misses": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "start_time": time.time(),
            "end_time": None,
            "avg_request_time": 0,
            "total_request_time": 0,
            "request_times": []
        }

    async def update_progress_message(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã bot, user_id –∏ status_message_id.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not hasattr(self, 'bot') or not self.bot or not hasattr(self, 'user_id') or not self.user_id or not hasattr(
                self, 'status_message_id') or not self.status_message_id:
            logging.warning("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥)
        current_time = time.time()
        if hasattr(self, 'last_status_update') and current_time - self.last_status_update < self.status_update_interval:
            return

        self.last_status_update = current_time

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.total_queries == 0:
            percent = 0
        else:
            percent = int((self.processed_queries / self.total_queries) * 100)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar_length = 20
        filled_length = int(
            progress_bar_length * self.processed_queries // self.total_queries) if self.total_queries > 0 else 0
        progress_bar = '‚ñà' * filled_length + '‚ñë' * (progress_bar_length - filled_length)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        success_count = sum(1 for status in self.query_status.values() if status == 'success')
        error_count = sum(1 for status in self.query_status.values() if status == 'error')
        cache_count = sum(1 for status in self.query_status.values() if status == 'cache')
        processing_count = sum(1 for status in self.query_status.values() if status == 'processing')

        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        elapsed_time = current_time - self.stats["start_time"]
        if self.processed_queries > 0:
            time_per_query = elapsed_time / self.processed_queries
            remaining_queries = self.total_queries - self.processed_queries
            eta_seconds = time_per_query * remaining_queries

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ETA
            if eta_seconds < 60:
                eta_text = f"{int(eta_seconds)} —Å–µ–∫"
            elif eta_seconds < 3600:
                eta_text = f"{int(eta_seconds // 60)} –º–∏–Ω {int(eta_seconds % 60)} —Å–µ–∫"
            else:
                eta_text = f"{int(eta_seconds // 3600)} —á {int((eta_seconds % 3600) // 60)} –º–∏–Ω"
        else:
            eta_text = "—Ä–∞—Å—á–µ—Ç..."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        status_message = (
            f"üîç <b>–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"<code>[{progress_bar}] {percent}%</code>\n\n"
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{self.processed_queries}</b> –∏–∑ <b>{self.total_queries}</b>\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{success_count}</b>\n"
            f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫—ç—à–∞: <b>{cache_count}</b>\n"
            f"  ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: <b>{processing_count}</b>\n"
            f"  ‚Ä¢ –û—à–∏–±–æ–∫: <b>{error_count}</b>\n\n"
            f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: <b>{eta_text}</b>\n\n"
            f"‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...</i>"
        )

        try:
            await self.bot.edit_message_text(
                chat_id=self.user_id,
                message_id=self.status_message_id,
                text=status_message,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")

    async def get_session_for_query(self, session_pool):
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø—É–ª–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏.

        :param session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π
        :return: –°–µ—Å—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        async with self.semaphore:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–æ—Ç–∞—Ü–∏–∏
            self.session_rotation_counter += 1

            if session_pool is None:
                raise Exception("–ü—É–ª —Å–µ—Å—Å–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É—á–µ—Ç–æ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
            session = await session_pool.get_available_session(
                is_mass_search=True,
                mass_search_id=self.mass_search_id
            )

            if not session:
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. MassSearch ID: {self.mass_search_id}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é")

            return session

    async def release_session(self, session, session_pool):
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

        :param session: –°–µ—Å—Å–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
        :param session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π
        """
        if session:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ –ø—É–ª —Å–µ—Å—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
            await session_pool.release_session(
                session,
                is_mass_search=True,
                mass_search_id=self.mass_search_id
            )

    async def process_query(self, query: str, user_id: int, session_pool, results_dict: Dict):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞.

        :param query: –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        :param results_dict: –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {query: result}
        """
        query_start_time = time.time()

        try:
            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            self.query_status[query] = 'processing'

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
            # –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            request_interval = random.uniform(self.min_request_interval, self.max_request_interval)

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –ø—É–ª —Å —É—á–µ—Ç–æ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
            try:
                session = await self.get_session_for_query(session_pool)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
                self.query_status[query] = 'error'
                results_dict[query] = []
                self.processed_queries += 1
                return

            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ perform_search –ø—É–ª–∞)
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                if not session.is_authenticated:
                    auth_success = await session.authenticate()
                    if not auth_success:
                        self.query_status[query] = 'error'
                        results_dict[query] = []
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é {session.session_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                        self.stats["failed_requests"] += 1
                        return

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                success, result = await session.search(query)

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                await asyncio.sleep(request_interval)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
                if success:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
                    parsed_data = await session.parse_results(result)
                    results_dict[query] = parsed_data
                    self.query_status[query] = 'success'
                    self.stats["successful_requests"] += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
                    try:
                        from bot.database.db import save_response_to_cache
                        save_response_to_cache(user_id, query, parsed_data)
                    except Exception as cache_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à: {cache_error}")
                else:
                    # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
                    logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {result}")
                    self.query_status[query] = 'error'
                    results_dict[query] = []
                    self.stats["failed_requests"] += 1
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                await self.release_session(session, session_pool)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            query_time = time.time() - query_start_time
            self.stats["request_times"].append(query_time)
            self.stats["total_request_time"] += query_time
            if self.stats["request_times"]:
                self.stats["avg_request_time"] = self.stats["total_request_time"] / len(self.stats["request_times"])

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}", exc_info=True)
            self.query_status[query] = 'error'
            results_dict[query] = []
            self.stats["failed_requests"] += 1
        finally:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.processed_queries += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await self.update_progress_message()

    async def process_file(self, file_path: str, user_id: int, session_pool, bot=None, status_message_id=None):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø—Ä–æ–±–∏–≤.

        :param file_path: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        :param status_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        :return: (–ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É, —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.bot = bot
        self.user_id = user_id
        self.status_message_id = status_message_id

        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        stats = {
            "total_lines": 0,
            "valid_lines": 0,
            "cached_queries": 0,
            "api_queries": 0,
            "phones_found": 0,
            "duplicate_phones": 0,
            "total_raw_phones": 0,
            "errors": 0,
            "skipped": 0,
            "processing_time": 0
        }

        self.stats = {
            "start_time": time.time(),
            "cache_hits": 0,
            "cache_misses": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "end_time": None,
            "avg_request_time": 0,
            "total_request_time": 0,
            "request_times": []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
            logging.error(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")
            stats["errors"] += 1
            return None, stats, {}

        start_time = time.time()
        valid_queries = []
        results_dict = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {query: result}

        # 1. –ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            stats["total_lines"] = len(lines)
            logging.info(f"–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}: –Ω–∞–π–¥–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
            from bot.utils import normalize_query, validate_query

            for line in lines:
                line = line.strip()
                if not line:
                    continue

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
                normalized_query = normalize_query(line)
                valid, result = validate_query(normalized_query)

                if valid:
                    valid_queries.append(normalized_query)
                    stats["valid_lines"] += 1

            logging.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {stats['valid_lines']} –∏–∑ {stats['total_lines']}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            return None, stats, {}

        if not valid_queries:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ {file_path}")
            return None, stats, {}

        # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        valid_queries = sorted(list(set(valid_queries)))
        self.total_queries = len(valid_queries)
        logging.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(valid_queries)}")

        # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_file_path = f"static/responses/{user_id}/mass_search_result_{timestamp}.txt"
        result_full_data_path = f"static/responses/{user_id}/mass_search_full_data_{timestamp}.json"
        os.makedirs(os.path.dirname(result_file_path), exist_ok=True)

        # 4. –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        cache_hit_queries = []  # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ
        cache_miss_queries = []  # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ

        # 4.1 –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        from bot.database.db import get_cached_response

        for query in valid_queries:
            try:
                cached_found, cached_response, cache_source = get_cached_response(user_id, query)
                if cached_found and cached_response:
                    cache_hit_queries.append(query)
                    results_dict[query] = cached_response
                    self.query_status[query] = 'cache'
                    self.processed_queries += 1
                    self.stats["cache_hits"] += 1
                else:
                    cache_miss_queries.append(query)
                    self.query_status[query] = 'pending'
                    self.stats["cache_misses"] += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞ –¥–ª—è '{query}': {e}")
                cache_miss_queries.append(query)
                self.query_status[query] = 'pending'
                self.stats["cache_misses"] += 1

        stats["cached_queries"] = len(cache_hit_queries)
        stats["api_queries"] = len(cache_miss_queries)

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {stats['cached_queries']}, —Ç—Ä–µ–±—É—é—Ç API-–∑–∞–ø—Ä–æ—Å–∞: {stats['api_queries']}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        if bot and status_message_id:
            await self.update_progress_message()

        # 4.2 –í—ã–ø–æ–ª–Ω—è–µ–º API-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫—ç—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        if cache_miss_queries:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            # –∏ –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            batch_size = min(self.batch_size, max(5, len(cache_miss_queries) // 10))

            logging.info(f"–†–∞–∑–±–∏–≤–∞–µ–º {len(cache_miss_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ {batch_size}")

            for i in range(0, len(cache_miss_queries), batch_size):
                batch_queries = cache_miss_queries[i:i + batch_size]
                batch_num = i // batch_size + 1
                total_batches = (len(cache_miss_queries) + batch_size - 1) // batch_size

                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {batch_num}/{total_batches}: {len(batch_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞
                api_tasks = []
                for query in batch_queries:
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                    task = self.process_query(query, user_id, session_pool, results_dict)
                    api_tasks.append(task)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á
                try:
                    await asyncio.gather(*api_tasks)
                    logging.info(f"–ü–∞–∫–µ—Ç {batch_num}/{total_batches} API-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ {batch_num}: {e}", exc_info=True)

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(2.0)

        # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
        # 5.1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        query_phones_dict = defaultdict(set)
        total_raw_phones = 0

        for query, result in results_dict.items():
            phones = self.extract_phones(result)

            if phones:
                total_raw_phones += len(phones)
                query_phones_dict[query].update(phones)
                logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
            elif result and isinstance(result, list) and len(result) > 0:
                # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—ã—á–Ω—ã–º –º–µ—Ç–æ–¥–æ–º, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
                formatted_text = self.format_result_for_phones(result)
                text_phones = self.extract_phones_from_text(formatted_text)

                if text_phones:
                    total_raw_phones += len(text_phones)
                    query_phones_dict[query].update(text_phones)
                    logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(text_phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç –¥–ª—è '{query}'")

        # 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
        # 6.1 –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
        has_results = False

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        total_unique_phones = 0
        for query, phones in query_phones_dict.items():
            total_unique_phones += len(phones)

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicate_phones = total_raw_phones - total_unique_phones

        try:
            with open(result_file_path, 'w', encoding='utf-8') as result_file:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                result_file.write(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û –ü–†–û–ë–ò–í–ê –û–¢ {timestamp}\n")
                result_file.write(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(valid_queries)}\n")
                result_file.write(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {total_unique_phones}\n")
                if duplicate_phones > 0:
                    result_file.write(f"–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_phones}\n")
                result_file.write(f"====================================\n\n")

                if total_unique_phones == 0:
                    result_file.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n")
                    result_file.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
                    result_file.write("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n")
                    result_file.write("1. –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ\n")
                    result_file.write("2. –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π\n")
                    result_file.write("3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API\n")
                else:
                    has_results = True
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
                    sorted_queries = sorted(query_phones_dict.keys())

                    for query in sorted_queries:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        all_phones = sorted(query_phones_dict[query])

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                        mobile_phones = []
                        for phone in all_phones:
                            if self.is_valid_mobile_phone(phone):
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
                                formatted_phone = self.format_phone_number(phone)
                                if formatted_phone and formatted_phone not in mobile_phones:
                                    mobile_phones.append(formatted_phone)

                        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã - –≤—ã–≤–æ–¥–∏–º –∏—Ö
                        if mobile_phones:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û/–∑–∞–ø—Ä–æ—Å
                            result_file.write(f"{query}\n")

                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –æ—Ç—Å—Ç—É–ø–æ–º
                            for phone in mobile_phones:
                                result_file.write(f" {phone}\n")

                            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                            result_file.write("\n")
                        else:
                            stats["skipped"] += 1

                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    successful_queries = len([q for q in query_phones_dict if query_phones_dict[q]])
                    success_rate = round((successful_queries / len(valid_queries)) * 100, 1) if valid_queries else 0

                    result_file.write(f"\n====================================\n")
                    result_file.write(f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                    result_file.write(
                        f"–ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {successful_queries}/{len(valid_queries)} ({success_rate}%)\n")

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if stats["skipped"] > 0:
                        result_file.write(f"\n–ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stats['skipped']}\n")
                        no_results_queries = [q for q in valid_queries if
                                              q not in query_phones_dict or not query_phones_dict[q]]
                        for q in no_results_queries[:5]:  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            result_file.write(f" - {q}\n")
                        if len(no_results_queries) > 5:
                            result_file.write(f" ... –∏ –µ—â–µ {len(no_results_queries) - 5} –∑–∞–ø—Ä–æ—Å–æ–≤\n")

            # 6.2 –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
            with open(result_full_data_path, 'w', encoding='utf-8') as full_data_file:
                json.dump(results_dict, full_data_file, ensure_ascii=False, indent=2)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
            stats["errors"] += 1

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤ –≤ –ø—É–ª–µ —Å–µ—Å—Å–∏–π
        try:
            await session_pool.finish_mass_search(self.mass_search_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞ –≤ –ø—É–ª–µ —Å–µ—Å—Å–∏–π: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats["phones_found"] = total_unique_phones
        stats["duplicate_phones"] = duplicate_phones
        stats["total_raw_phones"] = total_raw_phones
        stats["processing_time"] = round(time.time() - start_time, 2)
        stats["has_results"] = has_results

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["end_time"] = time.time()

        logging.info(f"–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {stats['processing_time']} —Å–µ–∫—É–Ω–¥. "
                     f"–ù–∞–π–¥–µ–Ω–æ {stats['phones_found']} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")

        return result_file_path, stats, results_dict

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    def is_valid_mobile_phone(self, phone_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –º–æ–±–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º"""
        if not phone_str:
            return False

        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ +
        phone_clean = ''.join(c for c in str(phone_str) if c.isdigit() or c == '+')

        # –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if phone_clean.startswith('+'):
            phone_clean = phone_clean[1:]

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º 8 –Ω–∞ 7 –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞
        if phone_clean.startswith('8') and len(phone_clean) == 11:
            phone_clean = '7' + phone_clean[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –¥–ª–∏–Ω–æ–π 11 —Ü–∏—Ñ—Ä
        if len(phone_clean) == 11 and phone_clean.startswith('7'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª - –∫–æ–¥ –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏
            mobile_codes = ['9', '8', '7', '6', '5', '4', '3']
            return phone_clean[1] in mobile_codes

        return False

    def extract_phones(self, data, query_phones=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API"""
        if query_phones is None:
            query_phones = set()

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        if isinstance(data, (str, int)) and str(data):
            phone_str = str(data).strip()

            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            digits_only = ''.join(c for c in phone_str if c.isdigit())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if len(digits_only) >= 7 and len(digits_only) <= 15:
                # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                if re.match(r'^\+?[\d\s\(\)\-\.]{7,20}$', phone_str):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
                    if self.is_valid_mobile_phone(phone_str):
                        query_phones.add(phone_str)
                    return query_phones

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–∏—Ñ—Ä
                if 10 <= len(digits_only) <= 12:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
                    if self.is_valid_mobile_phone(phone_str):
                        query_phones.add(phone_str)
                    return query_phones

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(data, dict):
            for key, value in data.items():
                key_upper = str(key).upper() if isinstance(key, str) else ""

                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                phone_keys = ["–¢–ï–õ–ï–§–û–ù", "PHONE", "–ú–û–ë–ò–õ–¨–ù–´–ô", "MOBILE", "–ö–û–ù–¢–ê–ö–¢",
                              "–¢–ï–õ", "TEL", "–ù–û–ú–ï–†", "NUMBER", "CONTACT", "MOB",
                              "–¢–ï–õ–ï–§–û–ù–´", "PHONES", "TELEPHONE"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if any(phone_key in key_upper for phone_key in phone_keys):
                    if isinstance(value, list):
                        for phone in value:
                            self.extract_phones(phone, query_phones)
                    else:
                        self.extract_phones(value, query_phones)

                # –î–ª—è –ø–æ–ª—è –¢–ï–õ–ï–§–û–ù —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
                if key_upper == "–¢–ï–õ–ï–§–û–ù" and isinstance(value, (dict, list)):
                    self.extract_phones(value, query_phones)

                # –í—Å–µ–≥–¥–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                self.extract_phones(value, query_phones)

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        elif isinstance(data, list):
            for item in data:
                self.extract_phones(item, query_phones)

        return query_phones

    def extract_phones_from_text(self, text):
        """
        –ò—â–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ

        :param text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        :return: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        """
        candidate_phones = set()

        # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        patterns = [
            r'\+?[78][\d\s\(\)\-]{8,15}',  # +7/8 —Å –ª—é–±—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            r'\d{3}[\s\-]?\d{3}[\s\-]?\d{4}',  # 999-999-9999
            r'\+?\d{1,4}[\s\-\(\)]+\d{3,4}[\s\-\(\)]+\d{3,4}[\s\-\(\)]*\d{0,4}',  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            r'(?<!\d)\d{10}(?!\d)',  # –ü—Ä–æ—Å—Ç–æ 10 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'(?<!\d)\d{11}(?!\d)'  # –ü—Ä–æ—Å—Ç–æ 11 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
        ]

        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω—ã–º
                if self.is_valid_mobile_phone(match):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ +7XXXXXXXXXX
                    clean_phone = ''.join(c for c in match if c.isdigit() or c == '+')
                    if clean_phone.startswith('+'):
                        clean_phone = clean_phone[1:]
                    if clean_phone.startswith('8') and len(clean_phone) == 11:
                        clean_phone = '7' + clean_phone[1:]

                    candidate_phones.add(f"+{clean_phone}")

        return candidate_phones

    def format_phone_number(self, phone_str):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–æ–º–µ—Ä –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        :param phone_str: –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ None
        """
        if not phone_str:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        if not self.is_valid_mobile_phone(phone_str):
            return None

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        digits_only = ''.join(c for c in str(phone_str) if c.isdigit())

        # –ï—Å–ª–∏ —ç—Ç–æ 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–¥–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if len(digits_only) == 10 and digits_only[0] in ['9', '8', '7', '6', '5', '4', '3']:
            return f"+7{digits_only}"

        # –ï—Å–ª–∏ —ç—Ç–æ 11-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
        elif len(digits_only) == 11 and digits_only[0] in ['7', '8']:
            # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7 –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞
            return f"+7{digits_only[1:]}"

        # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –Ω–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        elif len(digits_only) == 11 and digits_only.startswith('7'):
            return f"+{digits_only}"

        # –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏
        return None

    def format_result_for_phones(self, data):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

        :param data: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
        :return: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        result_text = ""

        if not isinstance(data, (list, dict)):
            return str(data)

        if isinstance(data, list):
            for item in data:
                result_text += self.format_result_for_phones(item) + "\n"
        elif isinstance(data, dict):
            for key, value in data.items():
                # –û—Å–æ–±–æ –≤—ã–¥–µ–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                if key.upper() in ["–¢–ï–õ–ï–§–û–ù", "–¢–ï–õ", "–ö–û–ù–¢–ê–ö–¢", "PHONE", "MOBILE", "CONTACT"]:
                    result_text += f"{key}: {value}\n"
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç
                    if isinstance(value, (list, dict)):
                        result_text += f"{key}:\n{self.format_result_for_phones(value)}\n"
                    else:
                        result_text += f"{key}: {value}\n"

        return result_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤"
@mass_search_router.callback_query(lambda c: c.data == "mass_search")
async def cb_mass_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤'"""
    user_id = callback.from_user.id
    if not check_active_session(user_id):
        await callback.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    balance = get_user_balance(user_id)
    if balance is None or balance <= 0:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞.")
        await callback.answer()
        return

    await state.set_state(MassSearchStates.waiting_for_file)
    await callback.message.answer(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .txt —Å–æ —Å–ø–∏—Å–∫–æ–º –§–ò–û –∏ –¥–∞—Ç–∞–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 01.01.1990\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 5 –ú–ë"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@mass_search_router.message(StateFilter(MassSearchStates.waiting_for_file), F.document)
async def process_file_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith('.txt'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (5 –ú–ë = 5 * 1024 * 1024 –±–∞–π—Ç)
    if message.document.file_size > 5 * 1024 * 1024:
        await message.answer("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id
    file_path = f"static/uploads/{user_id}_{message.document.file_name}"
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    try:
        await message.bot.download(file=file_id, destination=file_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    try:
        valid_lines = 0
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue

                normalized_query = normalize_query(line)
                valid, _ = validate_query(normalized_query)

                if valid:
                    valid_lines += 1

        if valid_lines == 0:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–±–∏–≤–∞.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
        enough_balance, balance, required_amount = check_balance_for_mass_search(user_id, valid_lines)

        if not enough_balance:
            additional_needed = required_amount - balance
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞.\n\n"
                f"–í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω–æ {valid_lines} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${required_amount:.2f}\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: ${additional_needed:.2f}"
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ FSM
        await state.update_data(
            file_path=file_path,
            valid_lines=valid_lines,
            total_cost=required_amount
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_mass_search"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_mass_search")
            ]
        ])

        # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        await state.set_state(MassSearchStates.confirming_search)
        await message.answer(
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n\n"
            f"- –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {valid_lines}\n"
            f"- –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${required_amount:.2f}\n"
            f"- –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=confirm_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
@mass_search_router.callback_query(lambda c: c.data == "confirm_mass_search",
                                   StateFilter(MassSearchStates.confirming_search))
async def process_confirm_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await mass_search_queue.is_user_in_queue(user_id):
        position = await mass_search_queue.get_position(user_id)
        queue_status = await mass_search_queue.get_queue_status()

        if position == 0:
            await callback.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.", show_alert=True)
        else:
            await callback.answer(
                f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {position} –∏–∑ {queue_status['waiting'] + queue_status['processing']}",
                show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    file_path = data.get("file_path")
    valid_lines = data.get("valid_lines")
    total_cost = data.get("total_cost")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    success, message_text, _ = batch_deduct_balance(user_id, valid_lines)

    if not success:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: " + message_text, show_alert=True)
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–û—Ç–º–µ–Ω–∞'."
        )
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
    log_id = log_mass_search_start(user_id, file_path, valid_lines, total_cost)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å
    queue_message = await callback.message.answer(
        "üïí <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.",
        parse_mode="HTML"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    position = await mass_search_queue.add_to_queue(
        user_id=user_id,
        message_id=queue_message.message_id,
        file_path=file_path,
        valid_lines=valid_lines,
        total_cost=total_cost
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
    asyncio.create_task(
        update_queue_position_message(
            bot=callback.bot,
            user_id=user_id,
            message_id=queue_message.message_id
        )
    )

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer(f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position}", show_alert=True)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞
@mass_search_router.callback_query(lambda c: c.data == "cancel_mass_search",
                                   StateFilter(MassSearchStates.confirming_search))
async def process_cancel_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    await callback.answer()
    await callback.message.answer("‚ùå –ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤ –æ—Ç–º–µ–Ω–µ–Ω.")

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    await state.clear()


async def update_queue_position_message(bot, user_id, message_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        while await mass_search_queue.is_user_in_queue(user_id):
            position = await mass_search_queue.get_position(user_id)
            queue_status = await mass_search_queue.get_queue_status()

            if position == 0 or await mass_search_queue.is_user_processing(user_id):
                # –ó–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=f"‚è≥ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...</b>\n\n"
                         f"–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_status['waiting']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                         f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {queue_status['processing']}/{queue_status['capacity']}",
                    parse_mode="HTML"
                )
            else:
                # –ó–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=f"üïí <b>–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤</b>\n\n"
                         f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {queue_status['waiting'] + queue_status['processing']}\n"
                         f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {queue_status['processing']}/{queue_status['capacity']}\n\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    parse_mode="HTML"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–±–∏–≤–æ–≤
async def process_mass_search_queue(bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–±–∏–≤–æ–≤"""
    logging.info("–ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–±–∏–≤–æ–≤")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    from bot.session_manager import session_pool

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            queue_item = await mass_search_queue.get_next_item()

            if queue_item:
                user_id = queue_item.user_id
                file_path = queue_item.file_path
                valid_lines = queue_item.valid_lines
                total_cost = queue_item.total_cost
                message_id = queue_item.message_id
                log_id = None  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(file_path):
                    logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    await bot.send_message(
                        user_id,
                        "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞."
                    )
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    await mass_search_queue.remove_item(user_id)
                    continue

                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    active_user_searches[user_id] += 1
                    await mass_search_semaphore.acquire()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    log_id = log_mass_search_start(user_id, file_path, valid_lines, total_cost)
                    if log_id:
                        update_mass_search_status(log_id, "processing")
                    else:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –º–∞—Å—Å–æ–≤–æ–º –ø—Ä–æ–±–∏–≤–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        await bot.send_message(
                            user_id,
                            "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –º–∞—Å—Å–æ–≤–æ–º –ø—Ä–æ–±–∏–≤–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞."
                        )

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    status_message = await bot.send_message(
                        user_id,
                        f"üîÑ <b>–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤</b>\n\n"
                        f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {valid_lines} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.2f}\n\n"
                        f"<code>[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%</code>\n\n"
                        f"‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...</i>",
                        parse_mode="HTML"
                    )

                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    from bot.mass_search import MassSearchProcessor

                    processor = MassSearchProcessor(
                        max_concurrent=3,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        min_request_interval=1.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        max_request_interval=4.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        batch_size=10  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞
                    try:
                        # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        result_file_path, stats, results_dict = await processor.process_file(
                            file_path,
                            user_id,
                            session_pool,
                            bot,
                            status_message.message_id
                        )
                    except Exception as file_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {file_error}", exc_info=True)
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        from bot.database.db import mass_refund_balance
                        success, refund_message = mass_refund_balance(user_id, valid_lines)

                        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await bot.send_message(
                            user_id,
                            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:</b>\n{str(file_error)}\n\n"
                            f"{refund_message}",
                            parse_mode="HTML"
                        )

                        if log_id:
                            update_mass_search_status(log_id, "failed")

                        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                        active_user_searches[user_id] -= 1
                        if active_user_searches[user_id] < 0:
                            active_user_searches[user_id] = 0
                        mass_search_semaphore.release()
                        await mass_search_queue.remove_item(user_id)
                        continue

                    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    phones_found = stats.get('phones_found', 0)
                    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –Ω–∞–π–¥–µ–Ω–æ {phones_found} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if phones_found == 0:
                        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ñ–∞–π–ª–µ {file_path}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if log_id:
                        update_mass_search_status(
                            log_id,
                            "completed",
                            results_file=result_file_path,
                            phones_found=stats.get('phones_found', 0)
                        )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    await bot.edit_message_text(
                        chat_id=user_id,
                        message_id=status_message.message_id,
                        text=f"‚úÖ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–æ–±–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                             f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                             f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']}\n"
                             f"‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['valid_lines']}\n"
                             f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {stats['phones_found']}\n"
                             f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞: {stats['processing_time']} —Å–µ–∫\n\n"
                             f"<code>[{'‚ñà' * 20}] 100%</code>",
                        parse_mode="HTML"
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    if result_file_path and os.path.exists(result_file_path) and os.path.getsize(result_file_path) > 0:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                        if stats.get("phones_found", 0) > 0:
                            result_message = f"üìé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ:"
                        else:
                            result_message = f"üìé –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ:"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª
                        await bot.send_message(user_id, result_message, parse_mode="HTML")

                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞
                        try:
                            await bot.send_document(user_id, FSInputFile(result_file_path))
                        except Exception as send_error:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {send_error}")
                            await bot.send_message(
                                user_id,
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                            )
                    else:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π
                        result_message = "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</b>"
                        await bot.send_message(user_id, result_message, parse_mode="HTML")

                        if log_id:
                            update_mass_search_status(log_id, "failed")

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞: {e}", exc_info=True)
                    await bot.send_message(
                        user_id,
                        f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b>\n{str(e)}",
                        parse_mode="HTML"
                    )

                    if log_id:
                        update_mass_search_status(log_id, "failed")
                except asyncio.CancelledError:
                    logging.warning(f"–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    if log_id:
                        update_mass_search_status(log_id, "failed", error_message="–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    from bot.database.db import mass_refund_balance
                    await mass_refund_balance(user_id, valid_lines)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(
                            user_id,
                            "‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                        )
                    except:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                finally:
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                    active_user_searches[user_id] -= 1
                    if active_user_searches[user_id] < 0:
                        active_user_searches[user_id] = 0  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                    mass_search_semaphore.release()

                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    await mass_search_queue.remove_item(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(1)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}", exc_info=True)
            await asyncio.sleep(5)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ