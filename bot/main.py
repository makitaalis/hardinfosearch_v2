import asyncio
import os
import sqlite3
from collections import defaultdict
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    BotCommand, BotCommandScopeChat, ErrorEvent, InlineKeyboardButton, BotCommandScopeDefault, FSInputFile,
    InlineKeyboardMarkup
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç SessionPoolManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-—Å–µ—Å—Å–∏—è–º–∏
from bot.session_pool import SessionPoolManager

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ common.py
from bot.common import mass_search_semaphore, MAX_USER_SEARCHES, active_user_searches, MAX_CONCURRENT_MASS_SEARCHES, \
    mass_search_queue
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from bot.database.db import (
    setup_database,
    check_active_session,
    logout_user,
    get_user_balance,
    add_balance,
    get_users_paginated,
    get_users_with_zero_balance,
    clear_old_cache,
    create_user,
    DB_PATH  # <-- –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ –∫—ç—à–∞
)
from bot.handlers import router as handlers_router
from bot.keyboards import get_admin_users_keyboard, get_admin_menu
from bot.logger import logging
from bot.mass_search import mass_search_router
from bot.utils import (
    get_api_balance,
    setup_translation_db
)

# Increase file descriptor limits if running as root
try:
    import resource
    soft, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
    new_soft = min(65536, hard)
    if new_soft > soft:
        resource.setrlimit(resource.RLIMIT_NOFILE, (new_soft, hard))
        logging.info(f"Increased file descriptor limit from {soft} to {new_soft}")
except (ImportError, PermissionError):
    pass

# Optimize event loop policy if uvloop is available
try:
    import uvloop
    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
    logging.info("Using uvloop for improved asyncio performance")
except ImportError:
    logging.info("uvloop not available, using standard asyncio")

# Optimize TCP settings
os.environ['PYTHONASYNCIOALLDEBUG'] = '0'  # Disable asyncio debug for production

# Configure asyncio for performance
loop = asyncio.get_event_loop()
loop.set_debug(False)

# If in Linux, increase file descriptors
if os.name == 'posix':
    try:
        import resource
        resource.setrlimit(resource.RLIMIT_NOFILE, (65536, 65536))
    except (ImportError, PermissionError, ValueError):
        pass

from bot.session_manager import session_pool as _session_pool, init_session_pool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID")) if os.getenv("ADMIN_ID") else 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—É–ª–∞ —Å–µ—Å—Å–∏–π
session_pool = None

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–π
CREDENTIALS = [
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),
    ("CipkaCapuchinka", "4uTStetepXK1p3vn"),


    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Å—Å–∏–π
]

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π router, –≥–¥–µ –ª–µ–∂–∞—Ç /help, /extended_search –∏ —Ç. –¥.
# (—Å–º. handlers.py)
dp.include_router(handlers_router)
dp.include_router(mass_search_router)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
setup_translation_db()


# ======== –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) ==========

async def clear_cache_daily():
    """–ö–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –∏–∑ –ë–î."""
    while True:
        clear_old_cache()
        logging.info("‚úÖ –°—Ç–∞—Ä—ã–π –∫—ç—à (24+ —á–∞—Å–∞) –æ—á–∏—â–µ–Ω.")
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞


async def notify_admin_about_zero_balance():
    """–ö–∞–∂–¥—ã–π —á–∞—Å —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º."""
    while True:
        users = get_users_with_zero_balance()
        if users and ADMIN_ID:
            msg = "‚ö† –£ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å:\n"
            for login, tg_id in users:
                msg += f"üë§ {login} (ID: {tg_id})\n"
            await bot.send_message(ADMIN_ID, msg)

        await asyncio.sleep(3600)  # 1 —á–∞—Å


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
async def refresh_expired_sessions():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    global session_pool
    while True:
        try:
            if session_pool is not None:
                await session_pool.refresh_expired_sessions()
                logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            else:
                logging.warning("Cannot refresh sessions: session_pool is None")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {str(e)}")

        # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await asyncio.sleep(1800)


# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–ø—Ä–∏–º–µ—Ä) ==========

class BalanceState(StatesGroup):
    waiting_for_amount = State()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserCreationState(StatesGroup):
    waiting_for_data = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è
class LogoutAllState(StatesGroup):
    waiting_for_message = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    confirming = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏


# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ¬´—Å–∏–Ω–µ–≥–æ –º–µ–Ω—é¬ª (slash-–∫–æ–º–∞–Ω–¥—ã) ==========

async def register_bot_commands():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    - –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω—Å–∫–∏–µ
    """

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –±–æ—Ç–∞"),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
        BotCommand(command="balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="logout", description="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"),
        BotCommand(command="extended_search", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
    ]

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    admin_commands = [
        BotCommand(command="admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="users", description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="add_balance", description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="create_user", description="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="api_balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API"),
        BotCommand(command="db_status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"),
        BotCommand(command="sessions_stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±-—Å–µ—Å—Å–∏–π")
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –Ω–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    if ADMIN_ID:
        full_command_list = user_commands + admin_commands
        await bot.set_my_commands(
            full_command_list,
            scope=BotCommandScopeChat(chat_id=ADMIN_ID)
        )
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID: {ADMIN_ID})")


# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========

@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    """
    /balance: –µ—Å–ª–∏ –∞–¥–º–∏–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    """
    user_id = message.from_user.id
    if not check_active_session(user_id):
        return await message.answer(
            "üîê <b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
            "üìå <b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>\n\n"
            "‚úÖ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>ivanov123 MyStrongPass2024</code>\n\n"
            "üí° <i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</i>\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Mersronada",
            parse_mode="HTML"
        )

    # –ê–¥–º–∏–Ω ‚Äî —É—Å–ª–æ–≤–Ω—ã–π –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å (–ø–æ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–µ–∫—Ç–∞)
    if user_id == ADMIN_ID:
        return await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ë–∞–ª–∞–Ω—Å —É—Å–ª–æ–≤–Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    bal = get_user_balance(user_id)
    if bal is None:
        await message.answer("–û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${bal:.2f}")


@dp.message(Command("api_balance"))
async def cmd_api_balance(message: Message):
    """
    /api_balance: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤–Ω–µ—à–Ω–µ–≥–æ API (—Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∞).
    """
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    success, resp = get_api_balance()
    await message.answer(resp)


@dp.message(Command("sessions_stats"))
async def cmd_sessions_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Å—Å–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    if not session_pool:
        return await message.answer("–ü—É–ª —Å–µ—Å—Å–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    stats = session_pool.get_stats()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ —Å–µ—Å—Å–∏–π</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']}\n"
        f"–ó–∞–Ω—è—Ç—ã—Ö —Å–µ—Å—Å–∏–π: {stats['busy_sessions']}\n\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤:</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['searches']['total_searches']}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö: {stats['searches']['successful_searches']}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['searches']['failed_searches']}\n"
        f"–ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π: {stats['searches']['reauth_count']}\n\n"
    )

    await message.answer(text, parse_mode="HTML")


@dp.message(Command("add_balance"))
async def cmd_add_balance(message: Message):
    """
    /add_balance –ª–æ–≥–∏–Ω —Å—É–º–º–∞ ‚Äî –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω).
    –ü—Ä–∏–º–µ—Ä: /add_balance testuser 15
    """
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.strip().split()
    if len(args) != 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance –ª–æ–≥–∏–Ω —Å—É–º–º–∞")

    _, login, amount_str = args
    try:
        amount = float(amount_str)
    except ValueError:
        return await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    success, info = add_balance(login, amount)
    await message.answer(info)


@dp.message(Command("users"))
async def cmd_users(message: Message):
    """
    /users: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    page = 1
    users, total = get_users_paginated(page=page, page_size=5)
    if not users:
        return await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    resp = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
    for login, bal in users:
        resp += f"üë§ {login} ‚Äî ${bal:.2f}\n"
    has_next = (page * 5) < total
    await message.answer(resp, reply_markup=get_admin_users_keyboard(page, users, has_next))


@dp.message(Command("create_user"))
async def cmd_create_user(message: Message):
    """
    /create_user –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å –±–∞–ª–∞–Ω—Å
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω).
    """
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    parts = message.text.strip().split()
    if len(parts) != 4:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_user –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å –±–∞–ª–∞–Ω—Å")

    _, login, password, bal_str = parts
    try:
        bal = float(bal_str)
    except ValueError:
        return await message.answer("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    ok, info = create_user(login, password, bal)
    await message.answer(info)


@dp.message(Command("admin"))
async def cmd_admin_panel(message: Message):
    """/admin: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é (ReplyKeyboardMarkup)."""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())


@dp.message(Command("db_status"))
async def cmd_db_status(message: Message):
    """
    /db_status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
    (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    from bot.database.db import diagnose_database_structure

    status_message = await message.answer("‚è≥ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    result = diagnose_database_structure()
    issues = result.get("issues", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìä <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"

    if issues:
        response += "‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        for i, issue in enumerate(issues, 1):
            response += f"{i}. {issue}\n"
        response += "\n"
    else:
        response += "‚úÖ <b>–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>\n\n"

    response += f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {result.get('active_users_count', 0)}\n"
    response += f"‚Ä¢ –í —Ç–∞–±–ª–∏—Ü–µ users: {result.get('users_table_active', 0)}\n"
    response += f"‚Ä¢ –í —Ç–∞–±–ª–∏—Ü–µ active_sessions: {result.get('active_sessions_table_active', 0)}\n"

    await status_message.edit_text(response, parse_mode="HTML")


# ======= –ö–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ / –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ =======

@dp.callback_query(lambda c: c.data.startswith("prev_page_") or c.data.startswith("next_page_"))
async def cb_paginate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)."""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    try:
        page_str = callback.data.split("_")[-1]
        page = int(page_str)
        if page < 1:
            page = 1

        users, total = get_users_paginated(page=page, page_size=5)
        if not users:
            await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return await callback.answer()

        resp = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
        for login, bal in users:
            resp += f"üë§ {login} ‚Äî ${bal:.2f}\n"
        has_next = (page * 5) < total

        await callback.message.edit_text(resp, reply_markup=get_admin_users_keyboard(page, users, has_next))
        await callback.answer()
    except ValueError:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith("add_balance_"))
async def cb_add_balance_user(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å" –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    try:
        login = callback.data.split("_", 2)[-1]
        if not login:
            raise ValueError("–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT login FROM users WHERE login = ?", (login,))
        if not cursor.fetchone():
            conn.close()
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        conn.close()

        await state.update_data(user_login=login)
        await state.set_state(BalanceState.waiting_for_amount)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{login}`:")
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback add_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.message(BalanceState.waiting_for_amount)
async def process_balance_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–∞–¥–º–∏–Ω)."""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    data = await state.get_data()
    login = data.get("user_login")
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ > 0).")

    success, info = add_balance(login, amount)
    await message.answer(info)
    await state.clear()


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é =======

@dp.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_list_users(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    page = 1
    users, total = get_users_paginated(page=page, page_size=5)
    if not users:
        return await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    resp = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
    for login, bal in users:
        resp += f"üë§ {login} ‚Äî ${bal:.2f}\n"
    has_next = (page * 5) < total
    await message.answer(resp, reply_markup=get_admin_users_keyboard(page, users, has_next))


@dp.message(lambda msg: msg.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def admin_add_balance_prompt(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`/add_balance –ª–æ–≥–∏–Ω —Å—É–º–º–∞`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `/add_balance user123 25.50`"
    )


@dp.message(lambda msg: msg.text == "üìä –ë–∞–ª–∞–Ω—Å API")
async def admin_api_balance(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üìä –ë–∞–ª–∞–Ω—Å API' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API
    success, resp = get_api_balance()
    await message.answer(resp)


@dp.message(lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache"))
    builder.add(InlineKeyboardButton(text="üì§ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="backup_db"))
    builder.row(InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞", callback_data="change_cost"))

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@dp.message(lambda msg: msg.text == "üö™ –í—ã–π—Ç–∏")
async def admin_logout(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üö™ –í—ã–π—Ç–∏' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞
    logout_user(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.")

    # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.callback_query(lambda c: c.data == "clear_cache")
async def cb_clear_cache(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)

    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM cache")
        before_count = cursor.fetchone()[0]

        cursor.execute("DELETE FROM cache")
        conn.commit()
        conn.close()

        await callback.message.answer(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {before_count} –∑–∞–ø–∏—Å–µ–π.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞", show_alert=True)


@dp.callback_query(lambda c: c.data == "backup_db")
async def cb_backup_db(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)

    try:
        from bot.database.backup import backup_database
        backup_file = backup_database()

        if backup_file:
            await callback.message.answer(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.")

        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞", show_alert=True)


@dp.callback_query(lambda c: c.data == "change_cost")
async def cb_change_cost(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    class CostState(StatesGroup):
        waiting_for_cost = State()

    await state.set_state(CostState.waiting_for_cost)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º REQUEST_COST –∏–∑ config.py
    from bot.config import REQUEST_COST
    await callback.message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${REQUEST_COST:.2f}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    await callback.answer()


@dp.message(lambda msg: msg.text == "‚ö†Ô∏è –†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –≤—Å–µ—Ö")
async def admin_logout_all_users(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –≤—Å–µ—Ö' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è session_active –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor.execute("PRAGMA table_info(users)")
        columns = [info[1] for info in cursor.fetchall()]

        if 'session_active' in columns:
            cursor.execute("SELECT COUNT(*) FROM users WHERE session_active=1 AND telegram_id != ?", (ADMIN_ID,))
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—è session_active –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É active_sessions
            cursor.execute("SELECT COUNT(*) FROM active_sessions WHERE is_active=1 AND telegram_id != ?", (ADMIN_ID,))

        active_count = cursor.fetchone()[0]
    except sqlite3.OperationalError as e:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–µ–µ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        active_count = 0
    finally:
        conn.close()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(LogoutAllState.waiting_for_message)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="cancel_logout_all")]
    ])

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å <b>–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> ({active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö).\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–µ—Ä–µ–¥ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ–º, "
        "—á—Ç–æ–±—ã –æ–Ω–∏ –∑–Ω–∞–ª–∏, —á—Ç–æ –∏–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –í —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.</i>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
        parse_mode="HTML",
        reply_markup=cancel_kb
    )


@dp.callback_query(lambda c: c.data == "cancel_logout_all")
async def cancel_logout_all(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)

    current_state = await state.get_state()
    if current_state in ["LogoutAllState:waiting_for_message", "LogoutAllState:confirming"]:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
    else:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è.", show_alert=True)


@dp.message(StateFilter(LogoutAllState.waiting_for_message))
async def process_logout_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await state.clear()
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(notification_text=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_logout_all"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_logout_all")
        ]
    ])

    await state.set_state(LogoutAllState.confirming)

    await message.answer(
        "‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        f"<code>{message.text}</code>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=confirm_kb
    )


@dp.callback_query(lambda c: c.data == "confirm_logout_all", StateFilter(LogoutAllState.confirming))
async def confirm_logout_all(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await state.clear()
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    notification_text = data.get("notification_text", "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await callback.message.edit_text(
        "üîÑ <b>–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</b>",
        parse_mode="HTML",
        reply_markup=None
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ
    from bot.database.db import logout_all_users
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è logout_all_users —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 3 –∑–Ω–∞—á–µ–Ω–∏—è
    # (—É—Å–ø–µ—Ö, —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
    success, users, users_updated = logout_all_users(admin_id=ADMIN_ID)

    logging.info(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è: success={success}, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π={users}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π={users_updated}")

    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    if not success:
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if users_updated == 0:
        await callback.message.edit_text(
            "‚ÑπÔ∏è <b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è.</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π.",
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    message_count = 0
    success_count = 0
    error_count = 0

    progress_message = await callback.message.edit_text(
        f"üîÑ <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</b>\n\n"
        f"‚Ä¢ –†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_updated}</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{len(users)}</b>\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>0/{len(users)}</b>",
        parse_mode="HTML"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if not users:
        await progress_message.edit_text(
            f"‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"‚Ä¢ –†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_updated}</b>\n"
            f"‚Ä¢ <i>–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</i>\n\n"
            f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω—ã, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.</i>",
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for idx, user_telegram_id in enumerate(users):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
        if not user_telegram_id or not isinstance(user_telegram_id, int) or user_telegram_id <= 0:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_telegram_id}")
            error_count += 1
            continue

        try:
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(
                    bot.send_message(
                        chat_id=user_telegram_id,
                        text=f"üîî <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{notification_text}",
                        parse_mode="HTML"
                    ),
                    timeout=5.0  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                )
                message_count += 1
                success_count += 1
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
            except asyncio.TimeoutError:
                error_count += 1
                logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if (idx + 1) % 5 == 0 or idx == len(users) - 1:
                await progress_message.edit_text(
                    f"üîÑ <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</b>\n\n"
                    f"‚Ä¢ –†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_updated}</b>\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{message_count}/{len(users)}</b>\n"
                    f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{(idx + 1) * 100 // len(users)}%</b>",
                    parse_mode="HTML"
                )

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.3)
        except Exception as e:
            error_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}", exc_info=True)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await progress_message.edit_text(
        f"‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"‚Ä¢ –†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_updated}</b>\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{success_count}/{len(users)}</b>\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{error_count}</b>\n\n"
        f"<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—ã –Ω–µ –±—ã–ª–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.</i>",
        parse_mode="HTML"
    )


@dp.message(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏")
async def admin_queue_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    from bot.common import mass_search_queue
    queue_status = await mass_search_queue.get_queue_status()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from bot.database.db import get_mass_search_stats
    db_stats = get_mass_search_stats()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–±–∏–≤–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_status['total']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {queue_status['processing']}/{queue_status['capacity']}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {queue_status['waiting']}\n\n"

        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–±–∏–≤–æ–≤: {db_stats['total']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {db_stats['completed']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π: {db_stats['failed']}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {db_stats['phones_found']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {int(db_stats['avg_time'] or 0)} —Å–µ–∫\n\n"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    active_items = await mass_search_queue.get_all_items()
    processing_items = [item for item in active_items if item.processing]

    if processing_items:
        text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"
        for i, item in enumerate(processing_items, 1):
            text += f"{i}. ID: {item.user_id}, —Å—Ç—Ä–æ–∫: {item.valid_lines}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    waiting_items = [item for item in active_items if not item.processing]
    if waiting_items:
        text += "\n<b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"
        for i, item in enumerate(waiting_items, 1):
            text += f"{i}. ID: {item.user_id}, —Å—Ç—Ä–æ–∫: {item.valid_lines}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–±–∏–≤–æ–≤
    if db_stats["recent"]:
        text += "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–∏–≤—ã:</b>\n"
        for i, item in enumerate(db_stats["recent"], 1):
            status_emoji = {
                "pending": "‚è≥",
                "processing": "üîÑ",
                "completed": "‚úÖ",
                "failed": "‚ùå"
            }.get(item["status"], "‚ö™Ô∏è")

            text += (
                f"{i}. {status_emoji} ID: {item['user_id']}, "
                f"—Å—Ç—Ä–æ–∫: {item['valid_lines']}, "
                f"—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {item['phones_found'] or 0}\n"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    text += f"\nüïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"

    await message.answer(text, parse_mode="HTML")


# ======= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =======
async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
    if not await test_telegram_connection():
        logging.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫ Telegram API –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–µ—Å—Å–∏–π
    from bot.config import load_credentials
    credentials = load_credentials()
    logging.info(f"Loaded {len(credentials)} credentials for session pool")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–µ—Å—Å–∏–π
    global session_pool
    from bot.session_manager import init_session_pool
    session_pool = init_session_pool(credentials, max_sessions=50)

    if session_pool is None:
        logging.error("Failed to initialize session pool")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
        # Temporary workaround for missing initialize_sessions method
        if hasattr(session_pool, 'initialize_sessions'):
            success_count, fail_count = await session_pool.initialize_sessions()
        else:
            logging.warning("initialize_sessions method not found, skipping session initialization")
            success_count, fail_count = 0, 0
        logging.info(f"Session pool initialized: {success_count} successful, {fail_count} failed")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(clear_cache_daily())
    asyncio.create_task(notify_admin_about_zero_balance())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
    asyncio.create_task(refresh_expired_sessions())

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    from bot.mass_search import process_mass_search_queue
    asyncio.create_task(process_mass_search_queue(bot))

    logging.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ¬´—Å–∏–Ω–µ–µ –º–µ–Ω—é¬ª (—Å–ø–∏—Å–æ–∫ /–∫–æ–º–∞–Ω–¥)
    await register_bot_commands()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
async def refresh_expired_sessions():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    from bot.session_manager import session_pool
    while True:
        try:
            await session_pool.refresh_expired_sessions()
            logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {str(e)}")

        # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await asyncio.sleep(1800)


# –î–æ–±–∞–≤–∏—Ç—å –≤ on_startup —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
async def test_telegram_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API"""
    try:
        me = await bot.get_me()
        logging.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API. –ë–æ—Ç {me.username} –∑–∞–ø—É—â–µ–Ω.")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
        return False


async def error_handler(event: ErrorEvent):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    exception = event.exception
    update = event.update

    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
    logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exception}", exc_info=True)

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and hasattr(update, 'message') and update.message:
            user_id = update.message.from_user.id
            await bot.send_message(
                user_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if ADMIN_ID and isinstance(exception, (ImportError, SyntaxError, KeyError, AttributeError)):
                error_msg = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{str(exception)[:100]}...\n\n"
                error_msg += f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                error_msg += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text[:50]}"
                await bot.send_message(ADMIN_ID, error_msg)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def cmd_add_user_menu(message: Message, state: FSMContext):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –Ω–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"."""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(UserCreationState.waiting_for_data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å –±–∞–ª–∞–Ω—Å`")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(StateFilter(UserCreationState.waiting_for_data))
async def process_user_creation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id != ADMIN_ID:
        await state.clear()
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    parts = message.text.strip().split()
    if len(parts) != 3:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å –±–∞–ª–∞–Ω—Å`")

    login, password, bal_str = parts
    try:
        bal = float(bal_str)
    except ValueError:
        return await message.answer("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ok, info = create_user(login, password, bal)
    await message.answer(info)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@dp.message(StateFilter("CostState:waiting_for_cost"))
async def process_new_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    current_state = await state.get_state()
    if current_state != "CostState:waiting_for_cost":
        return

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await state.clear()
        return

    try:
        new_cost = float(message.text)
        if new_cost <= 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global REQUEST_COST
        from bot.config import REQUEST_COST
        old_cost = REQUEST_COST

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        import bot.config
        bot.config.REQUEST_COST = new_cost

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª
        try:
            import os
            import re

            # –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
            env_path = ".env"

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            if os.path.exists(env_path):
                with open(env_path, 'r') as file:
                    content = file.read()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å REQUEST_COST
                if re.search(r'^REQUEST_COST=', content, re.MULTILINE):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    content = re.sub(r'^REQUEST_COST=.*$', f'REQUEST_COST={new_cost}', content, flags=re.MULTILINE)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    content += f'\nREQUEST_COST={new_cost}'

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                with open(env_path, 'w') as file:
                    file.write(content)

                await message.answer(
                    f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${old_cost:.2f} –Ω–∞ ${new_cost:.2f} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                with open(env_path, 'w') as file:
                    file.write(f'REQUEST_COST={new_cost}')
                await message.answer(
                    f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${old_cost:.2f} –Ω–∞ ${new_cost:.2f} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await message.answer(
                f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${old_cost:.2f} –Ω–∞ ${new_cost:.2f}, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.05")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (asyncio.run(main()))."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp.errors.register(error_handler)

    setup_database()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    await on_startup()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")